#define SDL_MAIN_HANDLED 

  

#include <iostream> 

#include "SDL2/SDL.h" 

#include "SDL2/SDL_image.h" 

#include <stdbool.h> 

  

const int WINDOW_WIDTH = 800; 

const int WINDOW_HEIGHT = 600; 

  

// Function prototypes 

bool init(); 

void close(); 

bool handleEvent(SDL_Event *e); 

void renderScene(); 

SDL_Texture* loadTexture(const std::string& path); 

void renderTexture(SDL_Texture* texture, int x, int y, int w, int h); 

  

// Global variables 

SDL_Window* gWindow = NULL; 

SDL_Renderer* gRenderer = NULL; 

SDL_Texture* gTextures[3] = {NULL}; 

SDL_Rect gEnvelopeRect = {WINDOW_WIDTH / 2 - 100, WINDOW_HEIGHT / 2 - 100, 200, 200}; 

bool letterOpened = false; 

bool mapDisplayed = false; 

  

bool init() { 

    bool success = true; 

  

    if (SDL_Init(SDL_INIT_VIDEO) < 0) { 

        std::cout << "SDL could not initialize! SDL Error: " << SDL_GetError() << std::endl; 

        success = false; 

    } else { 

        gWindow = SDL_CreateWindow("GOT LETTER!!", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN); 

        if (gWindow == NULL) { 

            std::cout << "Window could not be created! SDL Error: " << SDL_GetError() << std::endl; 

            success = false; 

        } else { 

            gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED); 

            if (gRenderer == NULL) { 

                std::cout << "Renderer could not be created! SDL Error: " << SDL_GetError() << std::endl; 

                success = false; 

            } else { 

                SDL_SetRenderDrawColor(gRenderer, 0, 255, 255, 255); // Set background color to aqua blue 

                int imgFlags = IMG_INIT_PNG; 

                if (!(IMG_Init(imgFlags) & imgFlags)) { 

                    std::cout << "SDL_image could not initialize! SDL_image Error: " << IMG_GetError() << std::endl; 

                    success = false; 

                } else { 

                    gTextures[0] = loadTexture("letter.png"); 

                    if (gTextures[0] == NULL) { 

                        std::cout << "Failed to load texture image letter.png! SDL_image Error: " << IMG_GetError() << std::endl; 

                        success = false; 

                    } 

                    gTextures[1] = loadTexture("opened_letter.png"); 

                    if (gTextures[1] == NULL) { 

                        std::cout << "Failed to load texture image opened_letter.png! SDL_image Error: " << IMG_GetError() << std::endl; 

                        success = false; 

                    } 

                    gTextures[2] = loadTexture("map.png"); 

                    if (gTextures[2] == NULL) { 

                        std::cout << "Failed to load texture image map.png! SDL_image Error: " << IMG_GetError() << std::endl; 

                        success = false; 

                    } 

                } 

            } 

        } 

    } 

  

    return success; 

} 

  

void close() { 

    for (int i = 0; i < 3; ++i) { 

        SDL_DestroyTexture(gTextures[i]); 

        gTextures[i] = NULL; 

    } 

  

    SDL_DestroyRenderer(gRenderer); 

    SDL_DestroyWindow(gWindow); 

    gRenderer = NULL; 

    gWindow = NULL; 

  

    IMG_Quit(); 

    SDL_Quit(); 

} 

  

bool handleEvent(SDL_Event *e) { 

    if (e->type == SDL_QUIT) { 

        return true; 

    } else if (e->type == SDL_MOUSEBUTTONDOWN) { 

        int x, y; 

        SDL_GetMouseState(&x, &y); 

        if (x >= gEnvelopeRect.x && x <= gEnvelopeRect.x + gEnvelopeRect.w && 

            y >= gEnvelopeRect.y && y <= gEnvelopeRect.y + gEnvelopeRect.h) { 

            letterOpened = true; 

            mapDisplayed = true; 

        } 

    } 

    return false; 

} 

  

void renderScene() { 

    SDL_RenderClear(gRenderer); 

    if (mapDisplayed) { 

        renderTexture(gTextures[2], 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); // Render the map scene 

    } else if (letterOpened) { 

        renderTexture(gTextures[1], 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); // Render the opened letter scene 

    } else { 

        renderTexture(gTextures[0], gEnvelopeRect.x, gEnvelopeRect.y, gEnvelopeRect.w, gEnvelopeRect.h); // Render the initial letter scene 

    } 

    SDL_RenderPresent(gRenderer); 

} 

  

SDL_Texture* loadTexture(const std::string& path) { 

    SDL_Surface* loadedSurface = IMG_Load(path.c_str()); 

    if (loadedSurface == NULL) { 

        std::cout << "Unable to load image " << path << "! SDL_image Error: " << IMG_GetError() << std::endl; 

        return NULL; 

    } 

    SDL_Texture* texture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface); 

    if (texture == NULL) { 

        std::cout << "Unable to create texture from " << path << "! SDL Error: " << SDL_GetError() << std::endl; 

    } 

    SDL_FreeSurface(loadedSurface); 

    return texture; 

} 

  

void renderTexture(SDL_Texture* texture, int x, int y, int w, int h) { 

    SDL_Rect renderQuad = {x, y, w, h}; 

    SDL_RenderCopy(gRenderer, texture, NULL, &renderQuad); 

} 

  

int main(int argc, char* args[]) { 

    if (!init()) { 

        std::cout << "Failed to initialize!" << std::endl; 

    } else { 

        bool quit = false; 

        SDL_Event e; 

  

        while (!quit) { 

            while (SDL_PollEvent(&e) != 0) { 

                if (handleEvent(&e)) { 

                    quit = true; 

                } 

            } 

  

            renderScene(); 

        } 

    } 

  

    close(); 

    return 0; 

} 

 
